// Mocks generated by Mockito 5.3.2 from annotations
// in satagro/test/features/sat_agro/domain/usecases/get_field_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:satagro/core/error/failure.dart' as _i5;
import 'package:satagro/features/sat_agro/domain/entities/field.dart' as _i6;
import 'package:satagro/features/sat_agro/domain/repositories/field_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FieldRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFieldRepository extends _i1.Mock implements _i2.FieldRepository {
  MockFieldRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.Field>>? getField(int? id) =>
      (super.noSuchMethod(Invocation.method(
        #getField,
        [id],
      )) as _i3.Future<_i4.Either<_i5.Failure, _i6.Field>>?);
}
